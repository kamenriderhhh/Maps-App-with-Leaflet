{"version":3,"sources":["pinpoint.png","components/SideDrawer/DrawerToggleButton.js","components/Toolbar/Toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","components/CardForm/CardForm.js","API.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","drawerToggleButton","props","react_default","a","createElement","className","onClick","click","toolbar","SideDrawer_DrawerToggleButton","drawerClickHandler","href","sideDrawer","drawerClasses","show","backdrop","CardForm","Card","body","CardTitle","sendingLocation","sentLocation","haveUsersLocation","CardText","Form","onSubmit","formSubmitted","FormGroup","Label","for","Input","onChange","valueChanged","type","step","name","id","placeholder","Button","color","cancelLocation","disabled","formIsValid","API_URL","window","location","hostname","myIcon","L","icon","iconUrl","pin","iconSize","iconAnchor","popupAnchor","schema","Joi","object","keys","latitude","number","min","max","required","longitude","App","state","lat","lng","zoom","userSetLocation","slat","slng","locations","showLocationForm","sideDrawerOpen","_this","setState","validate","error","event","preventDefault","fetch","method","headers","content-type","JSON","stringify","then","res","json","sendLocation","result","setTimeout","_event$target","target","value","prevState","Object","objectSpread","defineProperty","drawerToggleClickHandler","backdropClickHandler","_this2","this","position","Backdrop_Backdrop","style","height","Toolbar_Toolbar","SideDrawer_SideDrawer","Map","center","TileLayer","attribution","url","Marker","Popup","map","components_CardForm_CardForm","Component","Boolean","match","startApp","ReactDOM","render","src_App_0","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea431023.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pinpoint.b0112773.png\";","import React from 'react';\r\n\r\nimport './DrawerToggleButton.css'\r\n\r\nconst drawerToggleButton = props => (\r\n    <button className=\"toggle-button\" onClick={props.click}>\r\n        <div className=\"toggle-button__line\" />\r\n        <div className=\"toggle-button__line\" />\r\n        <div className=\"toggle-button__line\" />\r\n    </button>\r\n);\r\n\r\nexport default drawerToggleButton;","import React from 'react';\r\n\r\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\r\nimport './Toolbar.css';\r\n\r\nconst toolbar = props => (\r\n    <header className=\"toolbar\">\r\n        <nav className=\"toolbar__navigation\">\r\n            <div className=\"toolbar__toggle-button\">\r\n                <DrawerToggleButton click={props.drawerClickHandler}/>\r\n            </div>\r\n            <div className=\"toolbar__logo\"><a href=\"/\">Sailboat Location</a></div>\r\n            <div className=\"spacer\" />\r\n            <div className=\"toolbar_navigation-items\">\r\n                <ul>\r\n                    <li><a href=\"/\">Login</a></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default toolbar;","import React from 'react';\r\n\r\nimport './SideDrawer.css';\r\n\r\nconst sideDrawer = props => {\r\n    \r\n    let drawerClasses = 'side-drawer';\r\n    if (props.show) {\r\n        drawerClasses = 'side-drawer open';\r\n    }\r\n\r\n    return (\r\n        <nav className={drawerClasses}>\r\n            <ul>\r\n                <li><a href=\"/\">Main</a></li>\r\n                <li><a href=\"/\">Camera</a></li>\r\n                <li><a href=\"/\">Data</a></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default sideDrawer;","import React from 'react';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props => (\r\n    <div className=\"backdrop\" onClick={props.click}/>\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport { Card, Button, CardTitle, CardText, Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\nimport './CardForm.css';\r\n\r\nconst CardForm = (props) => {\r\n  return (\r\n    <Card body className=\"location-form\">\r\n      <CardTitle>Sailboat Geolocation</CardTitle>\r\n      {//<CardText>Please input the longitude and latitude for the sailboat.</CardText>\r\n      }\r\n      {\r\n        !props.sendingLocation && !props.sentLocation && props.haveUsersLocation ?\r\n          <Form onSubmit={props.formSubmitted}>\r\n            <FormGroup>\r\n                <Label for=\"slat\">Latitude</Label>\r\n                <Input \r\n                    onChange={props.valueChanged}\r\n                    type=\"number\" \r\n                    step=\"0.0000001\"\r\n                    name=\"slat\" \r\n                    id=\"slat\" \r\n                    placeholder=\"Enter the latitude\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label for=\"slng\">Longitude</Label>\r\n                <Input \r\n                    onChange={props.valueChanged}\r\n                    type=\"number\"\r\n                    step=\"0.0000001\" \r\n                    name=\"slng\" \r\n                    id=\"slng\" \r\n                    placeholder=\"Enter the longitude\" />\r\n            </FormGroup>\r\n            <Button type=\"cancel\" color=\"danger\" onClick={props.cancelLocation}>Cancel</Button> {' '}\r\n            <Button type=\"submit\" color=\"info\" disabled={!props.formIsValid()}>Send</Button>\r\n          </Form> :\r\n          props.sendingLocation || !props.haveUsersLocation ? \r\n            <CardText>Successfully submit a location!</CardText> : \"\"\r\n      }\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardForm;\r\n","const API_URL = window.location.hostname === 'localhost' ? 'http://10.234.35.203:80/api/v1/locations' : 'http://202.170.57.175:80/api/v1/locations';\r\n\r\n// Get database location\r\nexport function getLocation() {\r\n    //Fetching the sailboat latest location\r\n    return fetch(API_URL)\r\n        .then(res => res.json())\r\n        .then(locations => {\r\n            return locations\r\n        });\r\n}\r\n\r\n/* Get current location\r\nexport function getCurLocation() {\r\n  return new Promise((resolve) => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      resolve({\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude\r\n      });\r\n    }, () => {      \r\n      resolve(fetch('https://ipapi.co/json')\r\n        .then(res => res.json())\r\n        .then(location => {\r\n          return {\r\n            lat: location.latitude,\r\n            lng: location.longitude\r\n          };\r\n        }));\r\n    });\r\n  });\r\n}\r\n*/\r\n\r\nexport function sendLocation(location) {\r\n  return fetch(API_URL, {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json',\r\n    },\r\n    body: JSON.stringify(location)\r\n  }).then(res => res.json());\r\n}","import React, { Component } from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { Button } from 'reactstrap';\nimport Joi from 'joi';\nimport L from 'leaflet';\nimport pin from './pinpoint.png'; \nimport './App.css';\n\n// Component for side drawer and toolbar\nimport Toolbar from './components/Toolbar/Toolbar';\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport Backdrop from './components/Backdrop/Backdrop';\n//import classnames from 'classnames';\n\nimport CardForm from './components/CardForm/CardForm';\nimport { getLocation, sendLocation } from './API';\n\nvar myIcon = L.icon({\n  iconUrl: pin,\n  iconSize: [30, 41],\n  iconAnchor: [12.5, 40],\n  popupAnchor: [0, -45],\n})\n\nconst schema = Joi.object().keys({\n  latitude: Joi.number().min(-90).max(90).required(),\n  longitude: Joi.number().min(-180).max(180).required()\n});\n\nclass App extends Component {\n  state = {\n    location: {\n      lat: 5.354482, \n      lng: 100.301226,\n    },\n    haveUsersLocation: false,\n    zoom: 1,\n    userSetLocation: {\n      slat: '',\n      slng: '',\n    },\n    locations: [],\n    showLocationForm: false,\n    sendingLocation: false,\n    sentLocation: false,\n    //sideDrawer \n    sideDrawerOpen: false\n  };\n  \n  // Get user geolocation and reconfigurate some attributes\n  componentDidMount(){\n    // Location from the database\n    getLocation()\n      .then(locations => {\n        this.setState({\n          locations,\n          haveUsersLocation: true,\n          zoom: 18\n        });\n      });\n  };\n\n  showLocationForm = () => {\n    this.setState({\n      showLocationForm: true\n    });\n  }\n\n  cancelLocation = () => {\n    this.setState({\n      showLocationForm: false\n    });\n  }\n\n  formIsValid = () => {\n    const userSetLocation = {\n      latitude: this.state.userSetLocation.slat,\n      longitude: this.state.userSetLocation.slng\n    };\n    const result = Joi.validate(userSetLocation, schema);\n    //console.log(userSetLocation);\n    return !result.error && userSetLocation ? true : false;\n  };\n\n  formSubmitted = (event) => {\n    event.preventDefault();\n    //console.log(this.state.userSetLocation);\n    \n    if (this.formIsValid()){\n      //if no error\n      this.setState({\n        sendingLocation: true\n      });\n\n      const location = {\n        latitude: this.state.userSetLocation.slat,\n        longitude: this.state.userSetLocation.slng\n      };\n\n      sendLocation(location)\n        .then((result) => {\n          setTimeout(() => {\n            this.setState({\n              sendingLocation: false,\n              sentLocation: true\n            });\n          }, 4000);\n        });\n    }\n  };\n\n  valueChanged = (event) => {\n    const { name, value } = event.target; \n    this.setState((prevState) => ({\n      userSetLocation: {\n        ...prevState.userSetLocation,\n        [name]: value,\n      }\n    }))\n  };\n\n  // Sidedrawer function\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({sideDrawerOpen: false});\n  };\n\n  render(){\n    const position = [this.state.location.lat, this.state.location.lng];\n    // sidedrawer backdrop variable\n    let backdrop;\n\n    if (this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropClickHandler}/>;\n    }\n    \n    return (\n      <div style={{height: '100%'}}>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler}/> \n        <SideDrawer show={this.state.sideDrawerOpen}/>\n        {backdrop}\n        <div className=\"map\">\n          <Map className=\"map\" center={position} zoom={this.state.zoom}>\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            { \n              this.state.haveUsersLocation ?\n              <Marker \n                position={position} \n                icon={myIcon}>\n                <Popup>\n                  lat:{this.state.location.lat}, lng:{this.state.location.lng}\n                </Popup>\n              </Marker> : \"\"\n            }\n            {this.state.locations.map(location => (\n              <Marker \n                position={[location.latitude, location.longitude]} \n                icon={myIcon}>\n                <Popup>\n                  lat:{location.latitude}, lng:{location.longitude}\n                </Popup>\n              </Marker>\n            ))} \n          </Map>\n          {\n            !this.state.showLocationForm ?\n            <Button className=\"location-form\" onClick={this.showLocationForm} color=\"info\">Add a location</Button> :\n            !this.state.sentLocation ?\n            <CardForm\n              cancelLocation={this.cancelLocation}\n              showLocationForm={this.state.showLocationForm}\n              sendingLocation={this.state.sendingLocation}\n              sentLocation={this.state.sentLocation}\n              haveUsersLocation={this.state.haveUsersLocation}\n              formSubmitted={this.formSubmitted}\n              valueChanged={this.valueChanged}\n              formIsValid={this.formIsValid}\n            /> :\n            this.setState({\n              sentLocation: false,\n              showLocationForm: false\n            })\n          }   \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n}\n\n// IOS or Android setting\nif (window.cordova) {\n    document.addEventListener('deviceready', startApp, false);\n} else {\n    startApp();\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}