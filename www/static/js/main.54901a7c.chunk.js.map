{"version":3,"sources":["pinpoint.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","myIcon","L","icon","iconUrl","pin","iconSize","iconAnchor","popupAnchor","App","state","location","lat","lng","haveUsersLocation","zoom","activeTab","tab","this","setState","_this2","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","fetch","then","res","json","_this3","react_default","a","createElement","Nav","tabs","NavItem","NavLink","className","classnames","active","onClick","toggle","TabContent","TabPane","tabId","Row","Col","Map","center","TileLayer","attribution","url","Marker","Popup","sm","Card","body","CardTitle","CardText","Button","Component","Boolean","window","hostname","match","startApp","ReactDOM","render","src_App_0","document","getElementById","cordova","addEventListener","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6aCQpCC,EAASC,IAAEC,KAAK,CAClBC,QAASC,IACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,KAAM,IACnBC,YAAa,CAAC,GAAI,MAoILC,6MAhIbC,MAAQ,CACNC,SAAU,CACRC,IAAK,SACLC,IAAK,YAEPC,mBAAmB,EACnBC,KAAM,EAENC,UAAW,2EAKNC,GACDC,KAAKR,MAAMM,YAAcC,GAC3BC,KAAKC,SAAS,CACZH,UAAWC,gDAME,IAAAG,EAAAF,KACjBG,UAAUC,YAAYC,mBAAoB,SAACC,GACzCJ,EAAKD,SAAS,CACZR,SAAU,CACRC,IAAKY,EAASC,OAAOC,SACrBb,IAAKW,EAASC,OAAOE,WAEvBb,mBAAmB,EACnBC,KAAM,MAEP,WACDa,QAAQC,IAAI,4EAGZC,MAAM,yBACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAApB,GACJS,EAAKD,SAAS,CACZR,SAAU,CACRC,IAAKD,EAASe,SACdb,IAAKF,EAASgB,WAEhBb,mBAAmB,EACnBC,KAAM,0CAMR,IAAAmB,EAAAhB,KACAM,EAAW,CAACN,KAAKR,MAAMC,SAASC,IAAKM,KAAKR,MAAMC,SAASE,KAC/D,OACEsB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,MAAI,GACPJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,UAAWC,IAAW,CAAEC,OAAiC,MAAzB1B,KAAKR,MAAMM,YAC3C6B,QAAS,WAAQX,EAAKY,OAAO,OAF/B,oBAOFX,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,UAAWC,IAAW,CAAEC,OAAiC,MAAzB1B,KAAKR,MAAMM,YAC3C6B,QAAS,WAAQX,EAAKY,OAAO,OAF/B,cAOFX,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,UAAWC,IAAW,CAAEC,OAAiC,MAAzB1B,KAAKR,MAAMM,YAC3C6B,QAAS,WAAQX,EAAKY,OAAO,OAF/B,kBAQJX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAY/B,UAAWE,KAAKR,MAAMM,WAChCmB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,MAAM,KACbd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKV,UAAU,MAAMW,OAAQ7B,EAAUT,KAAMG,KAAKR,MAAMK,MACtDoB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAGJtC,KAAKR,MAAMI,kBACXqB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEjC,SAAUA,EACVrB,KAAMF,GACNkC,EAAAC,EAAAC,cAACqB,EAAA,EAAD,6BACuBvB,EAAAC,EAAAC,cAAA,WADvB,0BAGU,OAMtBF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,MAAM,KACbd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAKQ,GAAG,KACNxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,MAAI,GACR1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,kBACA3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,+BACA5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,yBAKR7B,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,MAAM,KACbd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,kCAtHIc,aCHEC,QACW,cAA7BC,OAAOxD,SAASyD,UAEe,UAA7BD,OAAOxD,SAASyD,UAEhBD,OAAOxD,SAASyD,SAASC,MACvB,2DCRN,IAAMC,EAAW,WACbC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,UAIjDR,OAAOS,QACPF,SAASG,iBAAiB,cAAeP,GAAU,GAEnDA,ID+GE,kBAAmBjD,WACrBA,UAAUyD,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.54901a7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pinpoint.b0112773.png\";","import React, { Component } from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Card, Button, CardTitle, CardText, Row, Col } from 'reactstrap';\nimport pin from './pinpoint.png'; \nimport './App.css';\nimport classnames from 'classnames';\n\nvar myIcon = L.icon({\n  iconUrl: pin,\n  iconSize: [30, 41],\n  iconAnchor: [12.5, 40],\n  popupAnchor: [0, -45],\n})\n\nclass App extends Component {\n  state = {\n    location: {\n      lat: 5.354482, \n      lng: 100.301226,\n    },\n    haveUsersLocation: false,\n    zoom: 1,\n    // for tab //\n    activeTab: '1',\n    //~~~~~~~~~~~~~~~~~~~~~~~~~~//\n  }\n\n  // For tab //\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n  \n  // Get user geolocation and reconfigurate some attributes\n  componentDidMount(){\n    navigator.geolocation.getCurrentPosition( (position) => {\n      this.setState({\n        location: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        },\n        haveUsersLocation: true,\n        zoom: 18,\n      });\n    }, () => {\n      console.log('Sorry but user does not give their location...'+\n      'Showing the IP location...');\n\n      fetch('https://ipapi.co/json')\n        .then(res => res.json())\n        .then(location => {\n          this.setState({\n            location: {\n              lat: location.latitude,\n              lng: location.longitude\n            },\n            haveUsersLocation: true,\n            zoom: 18,\n          });\n        })\n    });\n  }\n\n  render(){\n    const position = [this.state.location.lat, this.state.location.lng];\n    return (\n      <div>\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '1' })}\n              onClick={() => { this.toggle('1'); }}\n            >\n              Open Street Map\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '2' })}\n              onClick={() => { this.toggle('2'); }}\n            >\n              Pi Camera\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '3' })}\n              onClick={() => { this.toggle('3'); }}\n            >\n              Sensors Data\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n            <Row >\n              <Col>\n                <Map className=\"map\" center={position} zoom={this.state.zoom}>\n                  <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                  />\n                  { \n                    this.state.haveUsersLocation ?\n                    <Marker \n                      position={position} \n                      icon={myIcon} >\n                      <Popup>\n                        A pretty CSS3 popup. <br /> Easily customizable.\n                      </Popup>\n                    </Marker> : ''\n                  } \n                </Map>\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Row>\n              <Col sm=\"6\">\n                <Card body>\n                  <CardTitle>Pi Camera</CardTitle>\n                  <CardText>Pi Camera showing here</CardText>\n                  <Button>Display view</Button>\n                </Card>\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"3\">\n            <Row >\n              <Col>\n                  sensors data~~\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n}\n\n// IOS or Android setting\nif (window.cordova) {\n    document.addEventListener('deviceready', startApp, false);\n} else {\n    startApp();\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}